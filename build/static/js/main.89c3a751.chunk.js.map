{"version":3,"sources":["components/image-results/imageResults.js","components/search/search.js","App.js","serviceWorker.js","index.js"],"names":["imageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","react_default","a","createElement","GridList","cols","map","title","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchtext","amount","apiUrl","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","searchText","then","res","data","hits","catch","err","console","log","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_imageResults","App","MuiThemeProvider_default","Container","maxWidth","search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89c3a751.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass imageResults extends Component {\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n    }\r\n\r\n    handleOpen = img => {\r\n        this.setState({ open: true, currentImg: img });\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ open:false });\r\n    }\r\n    \r\n\r\n    render() {\r\n        let imageListContent;\r\n        const { images } = this.props;\r\n\r\n        if (images) {\r\n            imageListContent = (\r\n                <GridList cols={3}>\r\n                    {images.map(img => (\r\n                        <GridTile\r\n                            title={img.tags}\r\n                            key={img.id}\r\n                            subtitle={<span>by <strong>{img.user}</strong></span>}\r\n                            actionIcon={\r\n                                <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\r\n                                    <ZoomIn color=\"white\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            <img src={img.largeImageURL} alt=\"\" />\r\n                        </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            )\r\n        }\r\n        else {\r\n            imageListContent = null;\r\n        }\r\n\r\n        const actions = [\r\n            <FlatButton label=\"Fechar\" primary={true} onClick={this.handleClose} />\r\n        ]\r\n\r\n        return <div>\r\n            {imageListContent}\r\n            <Dialog\r\n                actions={actions}\r\n                modal={false}\r\n                open={this.state.open}\r\n                onRequestClose={this.handleClose}>\r\n                <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\r\n            </Dialog>\r\n        </div>;\r\n    }\r\n}\r\n\r\nimageResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n}\r\n\r\nexport default imageResults;","import React, { Component } from 'react'\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport axios from 'axios';\r\nimport ImageResults from '../image-results/imageResults';\r\n\r\nclass Search extends Component {\r\n    state = {\r\n        searchtext: '',\r\n        amount: 15,\r\n        apiUrl: 'https://pixabay.com/api',\r\n        apiKey: '4422728-09b2d2626b44e01ae95950c82',\r\n        images: []\r\n    };\r\n\r\n    onTextChange = (e) => {\r\n        const val = e.target.value;\r\n        this.setState({ [e.target.name]: val }, () => {\r\n            if(val === ''){\r\n                this.setState({images: []});\r\n            }\r\n            else{\r\n            axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n            .then(res => this.setState({images: res.data.hits}))\r\n            .catch(err => console.log(err));\r\n            }\r\n        })\r\n \r\n    };\r\n\r\n    onAmountChange = (e, index, value) => this.setState({ amount: value });\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    name=\"searchText\"\r\n                    value={this.state.searchText}\r\n                    onChange={this.onTextChange}\r\n                    floatingLabelText=\"Digite aqui\"\r\n                    fullWidth={true}\r\n                />\r\n                <br />\r\n                <SelectField\r\n                    name=\"amount\"\r\n                    floatingLabelText=\"Quantidade\"\r\n                    value={this.state.amount}\r\n                    onChange={this.onAmountChange}\r\n                >\r\n                    <MenuItem value={5} primaryText=\"5\" />\r\n                    <MenuItem value={10} primaryText=\"10\" />\r\n                    <MenuItem value={15} primaryText=\"15\" />\r\n                    <MenuItem value={30} primaryText=\"30\" />\r\n                    <MenuItem value={50} primaryText=\"50\" />\r\n                </SelectField>\r\n                <br />\r\n                {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : <p>Por Favor, digite algo no campo de busca.</p>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Search from './components/search/search';\nimport Container from '@material-ui/core/Container';\n\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return (\n      <MuiThemeProvider>\n        <Container maxWidth=\"md\">\n        <div><h2>Image Hub</h2><p>Apis Ativos: Pixabay</p></div>\n        <div><Search /></div>\n        </Container>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}